/* automatically generated by rust-bindgen 0.71.1 */

pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const MAGIC_EXTENSION: &[u8; 4] = b"ext\0";
pub const MAGIC_STAGE: &[u8; 4] = b"stg\0";
pub const MAGIC_CONNECTOR: &[u8; 4] = b"con\0";
pub const TICKS_SEC: u32 = 10000000;
pub const TICKS_MSEC: u32 = 10000;
pub const TICKS_USEC: u32 = 10;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __darwin_intptr_t = ::core::ffi::c_long;
pub type __darwin_natural_t = ::core::ffi::c_uint;
pub type __darwin_ct_rune_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::core::ffi::c_char; 128usize],
    pub _mbstateL: ::core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::core::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::core::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::core::ffi::c_long;
pub type __darwin_size_t = ::core::ffi::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::core::ffi::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::core::ffi::c_int;
pub type __darwin_clock_t = ::core::ffi::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::core::ffi::c_long;
pub type __darwin_time_t = ::core::ffi::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::core::ffi::c_uint;
pub type __darwin_fsfilcnt_t = ::core::ffi::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::core::ffi::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::core::ffi::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub __arg: *mut ::core::ffi::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::core::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::core::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::core::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::core::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::core::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::core::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::core::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::core::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"]
        [::core::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::core::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::core::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::core::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::core::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::core::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::core::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::core::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::core::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::core::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::core::ffi::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::core::ffi::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::core::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::core::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::core::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::core::ffi::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::core::ffi::c_uchar;
pub type u_int16_t = ::core::ffi::c_ushort;
pub type u_int32_t = ::core::ffi::c_uint;
pub type u_int64_t = ::core::ffi::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring_entry {
    pub function: *mut ::core::ffi::c_void,
    pub ctx: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lring_entry"][::core::mem::size_of::<lring_entry>() - 16usize];
    ["Alignment of lring_entry"][::core::mem::align_of::<lring_entry>() - 8usize];
    ["Offset of field: lring_entry::function"]
        [::core::mem::offset_of!(lring_entry, function) - 0usize];
    ["Offset of field: lring_entry::ctx"][::core::mem::offset_of!(lring_entry, ctx) - 8usize];
};
pub type ssd_os_extension_fn = ::core::option::Option<
    unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
>;
pub type ssd_os_stage_fn = ::core::option::Option<
    unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
>;
pub type ssd_os_ctrl_fn = ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>;
pub type ssd_os_conn_ring_fn =
    ::core::option::Option<unsafe extern "C" fn(entry: *mut lring_entry) -> ::core::ffi::c_int>;
pub type ssd_os_conn_fn =
    ::core::option::Option<unsafe extern "C" fn(entry: *mut lring_entry) -> *mut pipeline>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extension {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub extension_fn: ssd_os_extension_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extension"][::core::mem::size_of::<extension>() - 48usize];
    ["Alignment of extension"][::core::mem::align_of::<extension>() - 8usize];
    ["Offset of field: extension::magic"][::core::mem::offset_of!(extension, magic) - 0usize];
    ["Offset of field: extension::name"][::core::mem::offset_of!(extension, name) - 4usize];
    ["Offset of field: extension::extension_fn"]
        [::core::mem::offset_of!(extension, extension_fn) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stage {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub init_fn: ssd_os_ctrl_fn,
    pub exit_fn: ssd_os_ctrl_fn,
    pub stage_fn: ssd_os_stage_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stage"][::core::mem::size_of::<stage>() - 64usize];
    ["Alignment of stage"][::core::mem::align_of::<stage>() - 8usize];
    ["Offset of field: stage::magic"][::core::mem::offset_of!(stage, magic) - 0usize];
    ["Offset of field: stage::name"][::core::mem::offset_of!(stage, name) - 4usize];
    ["Offset of field: stage::init_fn"][::core::mem::offset_of!(stage, init_fn) - 40usize];
    ["Offset of field: stage::exit_fn"][::core::mem::offset_of!(stage, exit_fn) - 48usize];
    ["Offset of field: stage::stage_fn"][::core::mem::offset_of!(stage, stage_fn) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipeline {
    pub name: [::core::ffi::c_char; 32usize],
    pub internal: [*mut ::core::ffi::c_void; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pipeline"][::core::mem::size_of::<pipeline>() - 48usize];
    ["Alignment of pipeline"][::core::mem::align_of::<pipeline>() - 8usize];
    ["Offset of field: pipeline::name"][::core::mem::offset_of!(pipeline, name) - 0usize];
    ["Offset of field: pipeline::internal"][::core::mem::offset_of!(pipeline, internal) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct connector {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub init_fn: ssd_os_ctrl_fn,
    pub exit_fn: ssd_os_ctrl_fn,
    pub conn_fn: ssd_os_conn_fn,
    pub ring_fn: ssd_os_conn_ring_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of connector"][::core::mem::size_of::<connector>() - 72usize];
    ["Alignment of connector"][::core::mem::align_of::<connector>() - 8usize];
    ["Offset of field: connector::magic"][::core::mem::offset_of!(connector, magic) - 0usize];
    ["Offset of field: connector::name"][::core::mem::offset_of!(connector, name) - 4usize];
    ["Offset of field: connector::init_fn"][::core::mem::offset_of!(connector, init_fn) - 40usize];
    ["Offset of field: connector::exit_fn"][::core::mem::offset_of!(connector, exit_fn) - 48usize];
    ["Offset of field: connector::conn_fn"][::core::mem::offset_of!(connector, conn_fn) - 56usize];
    ["Offset of field: connector::ring_fn"][::core::mem::offset_of!(connector, ring_fn) - 64usize];
};
unsafe extern "C" {
    pub fn program_load(elf: *mut u8, size: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn program_pipe(file: *mut u8) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn program_connect(file: *mut u8) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn loader_extensions_print();
}
unsafe extern "C" {
    pub fn loader_stages_print();
}
unsafe extern "C" {
    pub fn loader_connectors_print();
}
unsafe extern "C" {
    pub fn ssd_os_print_s(s: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_c(c: ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_i(x: ::core::ffi::c_ulong);
}
unsafe extern "C" {
    pub fn ssd_os_print_h(x: ::core::ffi::c_ulong);
}
unsafe extern "C" {
    pub fn ssd_os_print_ss(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_ss_l(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_sis(
        s1: *const ::core::ffi::c_char,
        i: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_sis_l(
        s1: *const ::core::ffi::c_char,
        i: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_shs(
        s1: *const ::core::ffi::c_char,
        h: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_shs_l(
        s1: *const ::core::ffi::c_char,
        h: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_lock();
}
unsafe extern "C" {
    pub fn ssd_os_print_unlock();
}
unsafe extern "C" {
    pub fn ssd_os_ncores() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_this_cpu(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_get(key: ::core::ffi::c_int) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ssd_os_mem_size(key: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_nregions() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_cpy(
        dest: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        n: u32,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ssd_os_sleep(sec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_msleep(msec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_usleep(usec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_timer_interrupt_on(
        interval: ::core::ffi::c_int,
        function: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn ssd_os_timer_interrupt_off();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn ssd_os_lring_create(
        name: *mut ::core::ffi::c_char,
        size: ::core::ffi::c_int,
        mem: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_int,
    ) -> *mut lring;
}
unsafe extern "C" {
    pub fn ssd_os_lring_enqueue(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_enqueue_m(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_dequeue(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_dequeue_m(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_print(ring: *mut lring);
}
unsafe extern "C" {
    pub fn ssd_os_get_connection(
        connector_name: *mut ::core::ffi::c_char,
        pipe_name: *mut ::core::ffi::c_char,
    ) -> *mut pipeline;
}
pub type __builtin_va_list = *mut ::core::ffi::c_char;
