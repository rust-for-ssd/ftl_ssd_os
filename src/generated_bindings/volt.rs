/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            byte | mask
        } else {
            byte & !mask
        }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const AND64: i32 = -1;
pub const ZERO_32FLAG: u32 = 0;
pub const SEC64: u32 = 1000000;
pub const NVM_CH_IN_USE: u32 = 60;
pub const MAX_NAME_SIZE: u32 = 31;
pub const NVM_FTL_QUEUE_SIZE: u32 = 2048;
pub const NVM_QUEUE_RETRY: u32 = 10000;
pub const NVM_QUEUE_RETRY_SLEEP: u32 = 200;
pub const NVM_FTL_QUEUE_TO: u32 = 10000000;
pub const NVM_SYNCIO_TO: u32 = 10;
pub const NVM_SYNCIO_FLAG_BUF: u32 = 1;
pub const NVM_SYNCIO_FLAG_SYNC: u32 = 2;
pub const NVM_SYNCIO_FLAG_DEC: u32 = 4;
pub const NVM_SYNCIO_FLAG_MPL: u32 = 8;
pub const NVM_MAGIC: u32 = 60;
pub const NVM_TRANS_TO_NVM: u32 = 0;
pub const NVM_TRANS_FROM_NVM: u32 = 1;
pub const NVM_IO_NORMAL: u32 = 0;
pub const NVM_IO_RESERVED: u32 = 1;
pub const NVM_CMD_ADMIN: u32 = 0;
pub const NVM_CMD_IO: u32 = 1;
pub const VOLT_MEM_ERROR: u32 = 0;
pub const VOLT_MEM_OK: u32 = 1;
pub const VOLT_SECOND: u32 = 1000000;
pub const VOLT_CHIP_COUNT: u32 = 2;
pub const VOLT_VIRTUAL_LUNS: u32 = 2;
pub const VOLT_BLOCK_COUNT: u32 = 16;
pub const VOLT_PAGE_COUNT: u32 = 64;
pub const VOLT_SECTOR_COUNT: u32 = 4;
pub const VOLT_PLANE_COUNT: u32 = 2;
pub const VOLT_PAGE_SIZE: u32 = 16384;
pub const VOLT_SECTOR_SIZE: u32 = 4096;
pub const VOLT_SEC_OOB_SIZE: u32 = 16;
pub const VOLT_OOB_SIZE: u32 = 64;
pub const VOLT_DMA_SLOT_CH: u32 = 32;
pub const VOLT_DMA_SLOT_INDEX: u32 = 64;
pub const VOLT_DMA_READ: u32 = 1;
pub const VOLT_DMA_WRITE: u32 = 2;
pub const VOLT_BLK_LIFE: u32 = 5000;
pub const VOLT_RSV_BLK: u32 = 1;
pub const VOLT_READ_TIME: u32 = 50;
pub const VOLT_WRITE_TIME: u32 = 200;
pub const VOLT_ERASE_TIME: u32 = 1200;
pub const VOLT_QUEUE_SIZE: u32 = 2048;
pub const VOLT_QUEUE_TO: u32 = 48000;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_longlong;
pub type __uint64_t = ::core::ffi::c_ulonglong;
pub type __darwin_intptr_t = ::core::ffi::c_long;
pub type __darwin_natural_t = ::core::ffi::c_uint;
pub type __darwin_ct_rune_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::core::ffi::c_char; 128usize],
    pub _mbstateL: ::core::ffi::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::core::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::core::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::core::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::core::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::core::ffi::c_long;
pub type __darwin_size_t = ::core::ffi::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::core::ffi::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::core::ffi::c_int;
pub type __darwin_clock_t = ::core::ffi::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::core::ffi::c_long;
pub type __darwin_time_t = ::core::ffi::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::core::ffi::c_uint;
pub type __darwin_fsfilcnt_t = ::core::ffi::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::core::ffi::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::core::ffi::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub __arg: *mut ::core::ffi::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::core::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::core::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::core::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::core::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::core::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::core::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::core::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::core::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::core::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"]
        [::core::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::core::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::core::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::core::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::core::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::core::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::core::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::core::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::core::ffi::c_long,
    pub __opaque: [::core::ffi::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::core::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::core::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::core::ffi::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::core::ffi::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::core::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::core::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::core::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::core::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::core::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::core::ffi::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::core::ffi::c_uchar;
pub type u_int16_t = ::core::ffi::c_ushort;
pub type u_int32_t = ::core::ffi::c_uint;
pub type u_int64_t = ::core::ffi::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
pub const NVM_DMA_TO_HOST: _bindgen_ty_1 = 0;
pub const NVM_DMA_FROM_HOST: _bindgen_ty_1 = 1;
pub const NVM_DMA_SYNC_READ: _bindgen_ty_1 = 2;
pub const NVM_DMA_SYNC_WRITE: _bindgen_ty_1 = 3;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const MMGR_READ_PG: _bindgen_ty_2 = 1;
pub const MMGR_READ_OOB: _bindgen_ty_2 = 2;
pub const MMGR_WRITE_PG: _bindgen_ty_2 = 3;
pub const MMGR_BAD_BLK: _bindgen_ty_2 = 5;
pub const MMGR_ERASE_BLK: _bindgen_ty_2 = 7;
pub const MMGR_READ_SGL: _bindgen_ty_2 = 8;
pub const MMGR_WRITE_SGL: _bindgen_ty_2 = 9;
pub const MMGR_WRITE_PL_PG: _bindgen_ty_2 = 16;
pub const MMGR_READ_PL_PG: _bindgen_ty_2 = 17;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
pub const NVM_ERROR_EMAX_NAME_SIZE: NVM_ERROR = 1;
pub const NVM_ERROR_EMMGR_REGISTER: NVM_ERROR = 2;
pub const NVM_ERROR_EPCIE_REGISTER: NVM_ERROR = 3;
pub const NVM_ERROR_EFTL_REGISTER: NVM_ERROR = 4;
pub const NVM_ERROR_ENVME_REGISTER: NVM_ERROR = 5;
pub const NVM_ERROR_ECH_CONFIG: NVM_ERROR = 6;
pub const NVM_ERROR_EMEM: NVM_ERROR = 7;
pub const NVM_ERROR_ENOMMGR: NVM_ERROR = 8;
pub const NVM_ERROR_ENOFTL: NVM_ERROR = 9;
pub const NVM_ERROR_EPARSER_REGISTER: NVM_ERROR = 10;
pub const NVM_ERROR_ENOPARSER: NVM_ERROR = 11;
pub const NVM_ERROR_ENOTRANSP: NVM_ERROR = 12;
pub const NVM_ERROR_ETRANSP_REGISTER: NVM_ERROR = 13;
pub type NVM_ERROR = ::core::ffi::c_uint;
pub const NVM_IO_SUCCESS: _bindgen_ty_3 = 1;
pub const NVM_IO_FAIL: _bindgen_ty_3 = 2;
pub const NVM_IO_PROCESS: _bindgen_ty_3 = 3;
pub const NVM_IO_NEW: _bindgen_ty_3 = 4;
pub const NVM_IO_TIMEOUT: _bindgen_ty_3 = 5;
pub type _bindgen_ty_3 = ::core::ffi::c_uint;
pub const RUN_FLAGS_RUN_READY: RUN_FLAGS = 1;
pub const RUN_FLAGS_RUN_NVME_ALLOC: RUN_FLAGS = 2;
pub const RUN_FLAGS_RUN_MMGR: RUN_FLAGS = 4;
pub const RUN_FLAGS_RUN_FTL: RUN_FLAGS = 8;
pub const RUN_FLAGS_RUN_CH: RUN_FLAGS = 16;
pub const RUN_FLAGS_RUN_TRANSPORT: RUN_FLAGS = 32;
pub const RUN_FLAGS_RUN_NVME: RUN_FLAGS = 64;
pub const RUN_FLAGS_RUN_OXAPP: RUN_FLAGS = 128;
pub const RUN_FLAGS_RUN_FABRICS: RUN_FLAGS = 256;
pub const RUN_FLAGS_RUN_PARSER: RUN_FLAGS = 512;
pub type RUN_FLAGS = ::core::ffi::c_uint;
pub const OX_MEM_TYPES_OX_MEM_CMD_ARG: OX_MEM_TYPES = 0;
pub const OX_MEM_TYPES_OX_MEM_ADMIN: OX_MEM_TYPES = 1;
pub const OX_MEM_TYPES_OX_MEM_CORE_INIT: OX_MEM_TYPES = 2;
pub const OX_MEM_TYPES_OX_MEM_CORE_EXEC: OX_MEM_TYPES = 3;
pub const OX_MEM_TYPES_OX_MEM_OX_MQ: OX_MEM_TYPES = 4;
pub const OX_MEM_TYPES_OX_MEM_FTL_LNVM: OX_MEM_TYPES = 5;
pub const OX_MEM_TYPES_OX_MEM_MMGR: OX_MEM_TYPES = 6;
pub const OX_MEM_TYPES_OX_MEM_TCP_SERVER: OX_MEM_TYPES = 7;
pub const OX_MEM_TYPES_OX_MEM_MMGR_VOLT: OX_MEM_TYPES = 8;
pub const OX_MEM_TYPES_OX_MEM_MMGR_OCSSD: OX_MEM_TYPES = 9;
pub const OX_MEM_TYPES_OX_MEM_FTL: OX_MEM_TYPES = 10;
pub const OX_MEM_TYPES_OX_MEM_OXAPP: OX_MEM_TYPES = 11;
pub const OX_MEM_TYPES_OX_MEM_APP_TRANS: OX_MEM_TYPES = 12;
pub const OX_MEM_TYPES_OX_MEM_APP_CH: OX_MEM_TYPES = 13;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_LOG: OX_MEM_TYPES = 14;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_LBA: OX_MEM_TYPES = 15;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_GPR: OX_MEM_TYPES = 16;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_GMAP: OX_MEM_TYPES = 17;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_GC: OX_MEM_TYPES = 18;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_CPR: OX_MEM_TYPES = 19;
pub const OX_MEM_TYPES_OX_MEM_OXBLK_REC: OX_MEM_TYPES = 20;
pub const OX_MEM_TYPES_OX_MEM_FABRICS: OX_MEM_TYPES = 21;
pub const OX_MEM_TYPES_OX_MEM_NVMEF: OX_MEM_TYPES = 22;
pub const OX_MEM_TYPES_OX_MEM_MMGR_FILEBE: OX_MEM_TYPES = 23;
pub const OX_MEM_TYPES_OX_MEM_ELEOS_W: OX_MEM_TYPES = 29;
pub const OX_MEM_TYPES_OX_MEM_ELEOS_LBA: OX_MEM_TYPES = 30;
pub const OX_MEM_TYPES_OX_MEM_APP_HMAP: OX_MEM_TYPES = 31;
pub type OX_MEM_TYPES = ::core::ffi::c_uint;
pub const ox_stats_recovery_types_OX_STATS_REC_CP_READ_US: ox_stats_recovery_types = 0;
pub const ox_stats_recovery_types_OX_STATS_REC_BBT_US: ox_stats_recovery_types = 1;
pub const ox_stats_recovery_types_OX_STATS_REC_BLK_US: ox_stats_recovery_types = 2;
pub const ox_stats_recovery_types_OX_STATS_REC_CH_MAP_US: ox_stats_recovery_types = 3;
pub const ox_stats_recovery_types_OX_STATS_REC_GL_MAP_US: ox_stats_recovery_types = 4;
pub const ox_stats_recovery_types_OX_STATS_REC_REPLAY_US: ox_stats_recovery_types = 5;
pub const ox_stats_recovery_types_OX_STATS_REC_CP_WRITE_US: ox_stats_recovery_types = 6;
pub const ox_stats_recovery_types_OX_STATS_REC_START1_US: ox_stats_recovery_types = 7;
pub const ox_stats_recovery_types_OX_STATS_REC_START2_US: ox_stats_recovery_types = 8;
pub const ox_stats_recovery_types_OX_STATS_REC_LOG_PGS: ox_stats_recovery_types = 9;
pub const ox_stats_recovery_types_OX_STATS_REC_LOG_SZ: ox_stats_recovery_types = 10;
pub const ox_stats_recovery_types_OX_STATS_REC_DROPPED_LOGS: ox_stats_recovery_types = 11;
pub const ox_stats_recovery_types_OX_STATS_REC_TR_COMMIT: ox_stats_recovery_types = 12;
pub const ox_stats_recovery_types_OX_STATS_REC_TR_ABORT: ox_stats_recovery_types = 13;
pub type ox_stats_recovery_types = ::core::ffi::c_uint;
pub const ox_stats_cp_types_OX_STATS_CP_LOAD_ADDR: ox_stats_cp_types = 0;
pub const ox_stats_cp_types_OX_STATS_CP_MAP_EVICT: ox_stats_cp_types = 1;
pub const ox_stats_cp_types_OX_STATS_CP_MAPMD_EVICT: ox_stats_cp_types = 2;
pub const ox_stats_cp_types_OX_STATS_CP_BLK_EVICT: ox_stats_cp_types = 3;
pub const ox_stats_cp_types_OX_STATS_CP_MAP_BIG_SZ: ox_stats_cp_types = 4;
pub const ox_stats_cp_types_OX_STATS_CP_MAP_SMALL_SZ: ox_stats_cp_types = 5;
pub const ox_stats_cp_types_OX_STATS_CP_MAP_TINY_SZ: ox_stats_cp_types = 6;
pub const ox_stats_cp_types_OX_STATS_CP_BLK_SMALL_SZ: ox_stats_cp_types = 7;
pub const ox_stats_cp_types_OX_STATS_CP_BLK_TINY_SZ: ox_stats_cp_types = 8;
pub const ox_stats_cp_types_OX_STATS_CP_SZ: ox_stats_cp_types = 9;
pub type ox_stats_cp_types = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvm_ppa_addr {
    pub __bindgen_anon_1: nvm_ppa_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvm_ppa_addr__bindgen_ty_1 {
    pub g: nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1,
    pub ppa: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
};
impl nvm_ppa_addr__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn sec(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u64) }
    }
    #[inline]
    pub fn set_sec(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sec_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                3u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_sec_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pl(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_pl(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pl_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_pl_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ch(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_ch(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ch_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                12u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ch_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn lun(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 6u8) as u64) }
    }
    #[inline]
    pub fn set_lun(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn lun_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                6u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_lun_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn pg(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_pg(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn pg_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                12u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_pg_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn blk(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(35usize, 15u8) as u64) }
    }
    #[inline]
    pub fn set_blk(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(35usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn blk_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                35usize,
                15u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_blk_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                35usize,
                15u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rsv(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(50usize, 14u8) as u64) }
    }
    #[inline]
    pub fn set_rsv(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(50usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rsv_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                50usize,
                14u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_rsv_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                50usize,
                14u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        sec: u64,
        pl: u64,
        ch: u64,
        lun: u64,
        pg: u64,
        blk: u64,
        rsv: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let sec: u64 = unsafe { ::core::mem::transmute(sec) };
            sec as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let pl: u64 = unsafe { ::core::mem::transmute(pl) };
            pl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 12u8, {
            let ch: u64 = unsafe { ::core::mem::transmute(ch) };
            ch as u64
        });
        __bindgen_bitfield_unit.set(17usize, 6u8, {
            let lun: u64 = unsafe { ::core::mem::transmute(lun) };
            lun as u64
        });
        __bindgen_bitfield_unit.set(23usize, 12u8, {
            let pg: u64 = unsafe { ::core::mem::transmute(pg) };
            pg as u64
        });
        __bindgen_bitfield_unit.set(35usize, 15u8, {
            let blk: u64 = unsafe { ::core::mem::transmute(blk) };
            blk as u64
        });
        __bindgen_bitfield_unit.set(50usize, 14u8, {
            let rsv: u64 = unsafe { ::core::mem::transmute(rsv) };
            rsv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_ppa_addr__bindgen_ty_1"]
        [::core::mem::size_of::<nvm_ppa_addr__bindgen_ty_1>() - 8usize];
    ["Alignment of nvm_ppa_addr__bindgen_ty_1"]
        [::core::mem::align_of::<nvm_ppa_addr__bindgen_ty_1>() - 8usize];
    ["Offset of field: nvm_ppa_addr__bindgen_ty_1::g"]
        [::core::mem::offset_of!(nvm_ppa_addr__bindgen_ty_1, g) - 0usize];
    ["Offset of field: nvm_ppa_addr__bindgen_ty_1::ppa"]
        [::core::mem::offset_of!(nvm_ppa_addr__bindgen_ty_1, ppa) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_ppa_addr"][::core::mem::size_of::<nvm_ppa_addr>() - 8usize];
    ["Alignment of nvm_ppa_addr"][::core::mem::align_of::<nvm_ppa_addr>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_memory_region {
    pub addr: u64,
    pub paddr: u64,
    pub size: u64,
    pub is_valid: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_memory_region"][::core::mem::size_of::<nvm_memory_region>() - 32usize];
    ["Alignment of nvm_memory_region"][::core::mem::align_of::<nvm_memory_region>() - 8usize];
    ["Offset of field: nvm_memory_region::addr"]
        [::core::mem::offset_of!(nvm_memory_region, addr) - 0usize];
    ["Offset of field: nvm_memory_region::paddr"]
        [::core::mem::offset_of!(nvm_memory_region, paddr) - 8usize];
    ["Offset of field: nvm_memory_region::size"]
        [::core::mem::offset_of!(nvm_memory_region, size) - 16usize];
    ["Offset of field: nvm_memory_region::is_valid"]
        [::core::mem::offset_of!(nvm_memory_region, is_valid) - 24usize];
};
pub type nvm_callback_fn =
    ::core::option::Option<unsafe extern "C" fn(arg: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_callback {
    pub cb_fn: nvm_callback_fn,
    pub opaque: *mut ::core::ffi::c_void,
    pub ts: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_callback"][::core::mem::size_of::<nvm_callback>() - 24usize];
    ["Alignment of nvm_callback"][::core::mem::align_of::<nvm_callback>() - 8usize];
    ["Offset of field: nvm_callback::cb_fn"][::core::mem::offset_of!(nvm_callback, cb_fn) - 0usize];
    ["Offset of field: nvm_callback::opaque"]
        [::core::mem::offset_of!(nvm_callback, opaque) - 8usize];
    ["Offset of field: nvm_callback::ts"][::core::mem::offset_of!(nvm_callback, ts) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_io_status {
    pub status: u8,
    pub nvme_status: u16,
    pub pg_errors: u32,
    pub total_pgs: u32,
    pub pgs_p: u16,
    pub pgs_s: u16,
    pub ret_t: u16,
    pub pg_map: [u8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_io_status"][::core::mem::size_of::<nvm_io_status>() - 28usize];
    ["Alignment of nvm_io_status"][::core::mem::align_of::<nvm_io_status>() - 4usize];
    ["Offset of field: nvm_io_status::status"]
        [::core::mem::offset_of!(nvm_io_status, status) - 0usize];
    ["Offset of field: nvm_io_status::nvme_status"]
        [::core::mem::offset_of!(nvm_io_status, nvme_status) - 2usize];
    ["Offset of field: nvm_io_status::pg_errors"]
        [::core::mem::offset_of!(nvm_io_status, pg_errors) - 4usize];
    ["Offset of field: nvm_io_status::total_pgs"]
        [::core::mem::offset_of!(nvm_io_status, total_pgs) - 8usize];
    ["Offset of field: nvm_io_status::pgs_p"]
        [::core::mem::offset_of!(nvm_io_status, pgs_p) - 12usize];
    ["Offset of field: nvm_io_status::pgs_s"]
        [::core::mem::offset_of!(nvm_io_status, pgs_s) - 14usize];
    ["Offset of field: nvm_io_status::ret_t"]
        [::core::mem::offset_of!(nvm_io_status, ret_t) - 16usize];
    ["Offset of field: nvm_io_status::pg_map"]
        [::core::mem::offset_of!(nvm_io_status, pg_map) - 18usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvm_mmgr_io_cmd {
    pub nvm_io: *mut nvm_io_cmd,
    pub ppa: nvm_ppa_addr,
    pub ch: *mut nvm_channel,
    pub callback: nvm_callback,
    pub prp: [u64; 32usize],
    pub md_prp: u64,
    pub status: u8,
    pub cmdtype: u8,
    pub pg_index: u32,
    pub pg_sz: u32,
    pub n_sectors: u16,
    pub sec_sz: u32,
    pub md_sz: u32,
    pub sec_offset: u16,
    pub force_sync_md: u8,
    pub force_sync_data: [u8; 32usize],
    pub sync_count: u32,
    pub rsvd: [u8; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_mmgr_io_cmd"][::core::mem::size_of::<nvm_mmgr_io_cmd>() - 504usize];
    ["Alignment of nvm_mmgr_io_cmd"][::core::mem::align_of::<nvm_mmgr_io_cmd>() - 8usize];
    ["Offset of field: nvm_mmgr_io_cmd::nvm_io"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, nvm_io) - 0usize];
    ["Offset of field: nvm_mmgr_io_cmd::ppa"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, ppa) - 8usize];
    ["Offset of field: nvm_mmgr_io_cmd::ch"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, ch) - 16usize];
    ["Offset of field: nvm_mmgr_io_cmd::callback"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, callback) - 24usize];
    ["Offset of field: nvm_mmgr_io_cmd::prp"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, prp) - 48usize];
    ["Offset of field: nvm_mmgr_io_cmd::md_prp"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, md_prp) - 304usize];
    ["Offset of field: nvm_mmgr_io_cmd::status"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, status) - 312usize];
    ["Offset of field: nvm_mmgr_io_cmd::cmdtype"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, cmdtype) - 313usize];
    ["Offset of field: nvm_mmgr_io_cmd::pg_index"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, pg_index) - 316usize];
    ["Offset of field: nvm_mmgr_io_cmd::pg_sz"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, pg_sz) - 320usize];
    ["Offset of field: nvm_mmgr_io_cmd::n_sectors"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, n_sectors) - 324usize];
    ["Offset of field: nvm_mmgr_io_cmd::sec_sz"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, sec_sz) - 328usize];
    ["Offset of field: nvm_mmgr_io_cmd::md_sz"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, md_sz) - 332usize];
    ["Offset of field: nvm_mmgr_io_cmd::sec_offset"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, sec_offset) - 336usize];
    ["Offset of field: nvm_mmgr_io_cmd::force_sync_md"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, force_sync_md) - 338usize];
    ["Offset of field: nvm_mmgr_io_cmd::force_sync_data"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, force_sync_data) - 339usize];
    ["Offset of field: nvm_mmgr_io_cmd::sync_count"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, sync_count) - 372usize];
    ["Offset of field: nvm_mmgr_io_cmd::rsvd"]
        [::core::mem::offset_of!(nvm_mmgr_io_cmd, rsvd) - 376usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvm_io_cmd {
    pub cid: u64,
    pub channel: [*mut nvm_channel; 64usize],
    pub ppalist: [nvm_ppa_addr; 256usize],
    pub status: nvm_io_status,
    pub mmgr_io: [nvm_mmgr_io_cmd; 64usize],
    pub callback: nvm_callback,
    pub req: *mut ::core::ffi::c_void,
    pub mq_req: *mut ::core::ffi::c_void,
    pub opaque: *mut ::core::ffi::c_void,
    pub prp: [u64; 256usize],
    pub md_prp: [u64; 256usize],
    pub sec_sz: u32,
    pub md_sz: u32,
    pub n_sec: u32,
    pub slba: u64,
    pub cmdtype: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_io_cmd"][::core::mem::size_of::<nvm_io_cmd>() - 39032usize];
    ["Alignment of nvm_io_cmd"][::core::mem::align_of::<nvm_io_cmd>() - 8usize];
    ["Offset of field: nvm_io_cmd::cid"][::core::mem::offset_of!(nvm_io_cmd, cid) - 0usize];
    ["Offset of field: nvm_io_cmd::channel"][::core::mem::offset_of!(nvm_io_cmd, channel) - 8usize];
    ["Offset of field: nvm_io_cmd::ppalist"]
        [::core::mem::offset_of!(nvm_io_cmd, ppalist) - 520usize];
    ["Offset of field: nvm_io_cmd::status"]
        [::core::mem::offset_of!(nvm_io_cmd, status) - 2568usize];
    ["Offset of field: nvm_io_cmd::mmgr_io"]
        [::core::mem::offset_of!(nvm_io_cmd, mmgr_io) - 2600usize];
    ["Offset of field: nvm_io_cmd::callback"]
        [::core::mem::offset_of!(nvm_io_cmd, callback) - 34856usize];
    ["Offset of field: nvm_io_cmd::req"][::core::mem::offset_of!(nvm_io_cmd, req) - 34880usize];
    ["Offset of field: nvm_io_cmd::mq_req"]
        [::core::mem::offset_of!(nvm_io_cmd, mq_req) - 34888usize];
    ["Offset of field: nvm_io_cmd::opaque"]
        [::core::mem::offset_of!(nvm_io_cmd, opaque) - 34896usize];
    ["Offset of field: nvm_io_cmd::prp"][::core::mem::offset_of!(nvm_io_cmd, prp) - 34904usize];
    ["Offset of field: nvm_io_cmd::md_prp"]
        [::core::mem::offset_of!(nvm_io_cmd, md_prp) - 36952usize];
    ["Offset of field: nvm_io_cmd::sec_sz"]
        [::core::mem::offset_of!(nvm_io_cmd, sec_sz) - 39000usize];
    ["Offset of field: nvm_io_cmd::md_sz"][::core::mem::offset_of!(nvm_io_cmd, md_sz) - 39004usize];
    ["Offset of field: nvm_io_cmd::n_sec"][::core::mem::offset_of!(nvm_io_cmd, n_sec) - 39008usize];
    ["Offset of field: nvm_io_cmd::slba"][::core::mem::offset_of!(nvm_io_cmd, slba) - 39016usize];
    ["Offset of field: nvm_io_cmd::cmdtype"]
        [::core::mem::offset_of!(nvm_io_cmd, cmdtype) - 39024usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_mmgr_geometry {
    pub n_of_ch: u8,
    pub lun_per_ch: u8,
    pub blk_per_lun: u16,
    pub pg_per_blk: u16,
    pub sec_per_pg: u16,
    pub n_of_planes: u8,
    pub pg_size: u32,
    pub sec_oob_sz: u32,
    pub sec_per_pl_pg: u32,
    pub sec_per_blk: u32,
    pub sec_per_lun: u32,
    pub sec_per_ch: u32,
    pub pg_per_lun: u32,
    pub pg_per_ch: u32,
    pub blk_per_ch: u32,
    pub tot_sec: u64,
    pub tot_pg: u64,
    pub tot_blk: u32,
    pub tot_lun: u32,
    pub sec_size: u32,
    pub pl_pg_size: u32,
    pub blk_size: u32,
    pub lun_size: u64,
    pub ch_size: u64,
    pub tot_size: u64,
    pub pg_oob_sz: u32,
    pub pl_pg_oob_sz: u32,
    pub blk_oob_sz: u32,
    pub lun_oob_sz: u32,
    pub ch_oob_sz: u64,
    pub tot_oob_sz: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_mmgr_geometry"][::core::mem::size_of::<nvm_mmgr_geometry>() - 144usize];
    ["Alignment of nvm_mmgr_geometry"][::core::mem::align_of::<nvm_mmgr_geometry>() - 8usize];
    ["Offset of field: nvm_mmgr_geometry::n_of_ch"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, n_of_ch) - 0usize];
    ["Offset of field: nvm_mmgr_geometry::lun_per_ch"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, lun_per_ch) - 1usize];
    ["Offset of field: nvm_mmgr_geometry::blk_per_lun"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, blk_per_lun) - 2usize];
    ["Offset of field: nvm_mmgr_geometry::pg_per_blk"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pg_per_blk) - 4usize];
    ["Offset of field: nvm_mmgr_geometry::sec_per_pg"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_per_pg) - 6usize];
    ["Offset of field: nvm_mmgr_geometry::n_of_planes"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, n_of_planes) - 8usize];
    ["Offset of field: nvm_mmgr_geometry::pg_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pg_size) - 12usize];
    ["Offset of field: nvm_mmgr_geometry::sec_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_oob_sz) - 16usize];
    ["Offset of field: nvm_mmgr_geometry::sec_per_pl_pg"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_per_pl_pg) - 20usize];
    ["Offset of field: nvm_mmgr_geometry::sec_per_blk"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_per_blk) - 24usize];
    ["Offset of field: nvm_mmgr_geometry::sec_per_lun"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_per_lun) - 28usize];
    ["Offset of field: nvm_mmgr_geometry::sec_per_ch"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_per_ch) - 32usize];
    ["Offset of field: nvm_mmgr_geometry::pg_per_lun"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pg_per_lun) - 36usize];
    ["Offset of field: nvm_mmgr_geometry::pg_per_ch"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pg_per_ch) - 40usize];
    ["Offset of field: nvm_mmgr_geometry::blk_per_ch"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, blk_per_ch) - 44usize];
    ["Offset of field: nvm_mmgr_geometry::tot_sec"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_sec) - 48usize];
    ["Offset of field: nvm_mmgr_geometry::tot_pg"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_pg) - 56usize];
    ["Offset of field: nvm_mmgr_geometry::tot_blk"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_blk) - 64usize];
    ["Offset of field: nvm_mmgr_geometry::tot_lun"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_lun) - 68usize];
    ["Offset of field: nvm_mmgr_geometry::sec_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, sec_size) - 72usize];
    ["Offset of field: nvm_mmgr_geometry::pl_pg_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pl_pg_size) - 76usize];
    ["Offset of field: nvm_mmgr_geometry::blk_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, blk_size) - 80usize];
    ["Offset of field: nvm_mmgr_geometry::lun_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, lun_size) - 88usize];
    ["Offset of field: nvm_mmgr_geometry::ch_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, ch_size) - 96usize];
    ["Offset of field: nvm_mmgr_geometry::tot_size"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_size) - 104usize];
    ["Offset of field: nvm_mmgr_geometry::pg_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pg_oob_sz) - 112usize];
    ["Offset of field: nvm_mmgr_geometry::pl_pg_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, pl_pg_oob_sz) - 116usize];
    ["Offset of field: nvm_mmgr_geometry::blk_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, blk_oob_sz) - 120usize];
    ["Offset of field: nvm_mmgr_geometry::lun_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, lun_oob_sz) - 124usize];
    ["Offset of field: nvm_mmgr_geometry::ch_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, ch_oob_sz) - 128usize];
    ["Offset of field: nvm_mmgr_geometry::tot_oob_sz"]
        [::core::mem::offset_of!(nvm_mmgr_geometry, tot_oob_sz) - 136usize];
};
pub const mmgr_flags_MMGR_FLAG_PL_CMD: mmgr_flags = 1;
pub const mmgr_flags_MMGR_FLAG_MIN_CP_TIME: mmgr_flags = 4;
pub type mmgr_flags = ::core::ffi::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_magic {
    pub rsvd: u32,
    pub magic: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_magic"][::core::mem::size_of::<nvm_magic>() - 8usize];
    ["Alignment of nvm_magic"][::core::mem::align_of::<nvm_magic>() - 1usize];
    ["Offset of field: nvm_magic::rsvd"][::core::mem::offset_of!(nvm_magic, rsvd) - 0usize];
    ["Offset of field: nvm_magic::magic"][::core::mem::offset_of!(nvm_magic, magic) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_io_data {
    pub ch: *mut nvm_channel,
    pub n_pl: u8,
    pub pg_sz: u32,
    pub buf: *mut u8,
    pub pl_vec: *mut *mut u8,
    pub oob_vec: *mut *mut u8,
    pub sec_vec: *mut *mut *mut u8,
    pub meta_sz: u32,
    pub buf_sz: u32,
    pub mod_oob: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_io_data"][::core::mem::size_of::<nvm_io_data>() - 64usize];
    ["Alignment of nvm_io_data"][::core::mem::align_of::<nvm_io_data>() - 8usize];
    ["Offset of field: nvm_io_data::ch"][::core::mem::offset_of!(nvm_io_data, ch) - 0usize];
    ["Offset of field: nvm_io_data::n_pl"][::core::mem::offset_of!(nvm_io_data, n_pl) - 8usize];
    ["Offset of field: nvm_io_data::pg_sz"][::core::mem::offset_of!(nvm_io_data, pg_sz) - 12usize];
    ["Offset of field: nvm_io_data::buf"][::core::mem::offset_of!(nvm_io_data, buf) - 16usize];
    ["Offset of field: nvm_io_data::pl_vec"]
        [::core::mem::offset_of!(nvm_io_data, pl_vec) - 24usize];
    ["Offset of field: nvm_io_data::oob_vec"]
        [::core::mem::offset_of!(nvm_io_data, oob_vec) - 32usize];
    ["Offset of field: nvm_io_data::sec_vec"]
        [::core::mem::offset_of!(nvm_io_data, sec_vec) - 40usize];
    ["Offset of field: nvm_io_data::meta_sz"]
        [::core::mem::offset_of!(nvm_io_data, meta_sz) - 48usize];
    ["Offset of field: nvm_io_data::buf_sz"]
        [::core::mem::offset_of!(nvm_io_data, buf_sz) - 52usize];
    ["Offset of field: nvm_io_data::mod_oob"]
        [::core::mem::offset_of!(nvm_io_data, mod_oob) - 56usize];
};
pub type nvm_mmgr_read_pg =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut nvm_mmgr_io_cmd) -> ::core::ffi::c_int>;
pub type nvm_mmgr_write_pg =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut nvm_mmgr_io_cmd) -> ::core::ffi::c_int>;
pub type nvm_mmgr_erase_blk =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut nvm_mmgr_io_cmd) -> ::core::ffi::c_int>;
pub type nvm_mmgr_get_ch_info = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut nvm_channel, arg2: u16) -> ::core::ffi::c_int,
>;
pub type nvm_mmgr_set_ch_info = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut nvm_channel, arg2: u16) -> ::core::ffi::c_int,
>;
pub type nvm_mmgr_exit = ::core::option::Option<unsafe extern "C" fn(arg1: *mut nvm_mmgr)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_mmgr_ops {
    pub read_pg: nvm_mmgr_read_pg,
    pub write_pg: nvm_mmgr_write_pg,
    pub erase_blk: nvm_mmgr_erase_blk,
    pub exit: nvm_mmgr_exit,
    pub get_ch_info: nvm_mmgr_get_ch_info,
    pub set_ch_info: nvm_mmgr_set_ch_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_mmgr_ops"][::core::mem::size_of::<nvm_mmgr_ops>() - 48usize];
    ["Alignment of nvm_mmgr_ops"][::core::mem::align_of::<nvm_mmgr_ops>() - 8usize];
    ["Offset of field: nvm_mmgr_ops::read_pg"]
        [::core::mem::offset_of!(nvm_mmgr_ops, read_pg) - 0usize];
    ["Offset of field: nvm_mmgr_ops::write_pg"]
        [::core::mem::offset_of!(nvm_mmgr_ops, write_pg) - 8usize];
    ["Offset of field: nvm_mmgr_ops::erase_blk"]
        [::core::mem::offset_of!(nvm_mmgr_ops, erase_blk) - 16usize];
    ["Offset of field: nvm_mmgr_ops::exit"][::core::mem::offset_of!(nvm_mmgr_ops, exit) - 24usize];
    ["Offset of field: nvm_mmgr_ops::get_ch_info"]
        [::core::mem::offset_of!(nvm_mmgr_ops, get_ch_info) - 32usize];
    ["Offset of field: nvm_mmgr_ops::set_ch_info"]
        [::core::mem::offset_of!(nvm_mmgr_ops, set_ch_info) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_mmgr {
    pub name: *const ::core::ffi::c_char,
    pub ops: *mut nvm_mmgr_ops,
    pub geometry: *mut nvm_mmgr_geometry,
    pub ch_info: *mut nvm_channel,
    pub flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_mmgr"][::core::mem::size_of::<nvm_mmgr>() - 40usize];
    ["Alignment of nvm_mmgr"][::core::mem::align_of::<nvm_mmgr>() - 8usize];
    ["Offset of field: nvm_mmgr::name"][::core::mem::offset_of!(nvm_mmgr, name) - 0usize];
    ["Offset of field: nvm_mmgr::ops"][::core::mem::offset_of!(nvm_mmgr, ops) - 8usize];
    ["Offset of field: nvm_mmgr::geometry"][::core::mem::offset_of!(nvm_mmgr, geometry) - 16usize];
    ["Offset of field: nvm_mmgr::ch_info"][::core::mem::offset_of!(nvm_mmgr, ch_info) - 24usize];
    ["Offset of field: nvm_mmgr::flags"][::core::mem::offset_of!(nvm_mmgr, flags) - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct nvm_channel {
    pub ch_id: u16,
    pub ch_mmgr_id: u16,
    pub ns_pgs: u64,
    pub slba: u64,
    pub elba: u64,
    pub tot_bytes: u64,
    pub mmgr_rsv: u16,
    pub ftl_rsv: u16,
    pub mmgr: *mut nvm_mmgr,
    pub ftl: *mut nvm_ftl,
    pub geometry: *mut nvm_mmgr_geometry,
    pub mmgr_rsv_list: [nvm_ppa_addr; 16usize],
    pub ftl_rsv_list: [nvm_ppa_addr; 16usize],
    pub __bindgen_anon_1: nvm_channel__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union nvm_channel__bindgen_ty_1 {
    pub i: nvm_channel__bindgen_ty_1__bindgen_ty_1,
    pub nvm_info: u64,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct nvm_channel__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_channel__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::size_of::<nvm_channel__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of nvm_channel__bindgen_ty_1__bindgen_ty_1"]
        [::core::mem::align_of::<nvm_channel__bindgen_ty_1__bindgen_ty_1>() - 8usize];
};
impl nvm_channel__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn ns_id(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ns_id(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ns_id_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ns_id_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ns_part(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_ns_part(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ns_part_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                32u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ns_part_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                32u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ftl_id(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_ftl_id(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ftl_id_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                48usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_ftl_id_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                48usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn in_use(&self) -> u64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(56usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_in_use(&mut self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(56usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn in_use_raw(this: *const Self) -> u64 {
        unsafe {
            ::core::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::core::ptr::addr_of!((*this)._bitfield_1),
                56usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_in_use_raw(this: *mut Self, val: u64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::core::ptr::addr_of_mut!((*this)._bitfield_1),
                56usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ns_id: u64,
        ns_part: u64,
        ftl_id: u64,
        in_use: u64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ns_id: u64 = unsafe { ::core::mem::transmute(ns_id) };
            ns_id as u64
        });
        __bindgen_bitfield_unit.set(16usize, 32u8, {
            let ns_part: u64 = unsafe { ::core::mem::transmute(ns_part) };
            ns_part as u64
        });
        __bindgen_bitfield_unit.set(48usize, 8u8, {
            let ftl_id: u64 = unsafe { ::core::mem::transmute(ftl_id) };
            ftl_id as u64
        });
        __bindgen_bitfield_unit.set(56usize, 8u8, {
            let in_use: u64 = unsafe { ::core::mem::transmute(in_use) };
            in_use as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_channel__bindgen_ty_1"]
        [::core::mem::size_of::<nvm_channel__bindgen_ty_1>() - 8usize];
    ["Alignment of nvm_channel__bindgen_ty_1"]
        [::core::mem::align_of::<nvm_channel__bindgen_ty_1>() - 8usize];
    ["Offset of field: nvm_channel__bindgen_ty_1::i"]
        [::core::mem::offset_of!(nvm_channel__bindgen_ty_1, i) - 0usize];
    ["Offset of field: nvm_channel__bindgen_ty_1::nvm_info"]
        [::core::mem::offset_of!(nvm_channel__bindgen_ty_1, nvm_info) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_channel"][::core::mem::size_of::<nvm_channel>() - 336usize];
    ["Alignment of nvm_channel"][::core::mem::align_of::<nvm_channel>() - 8usize];
    ["Offset of field: nvm_channel::ch_id"][::core::mem::offset_of!(nvm_channel, ch_id) - 0usize];
    ["Offset of field: nvm_channel::ch_mmgr_id"]
        [::core::mem::offset_of!(nvm_channel, ch_mmgr_id) - 2usize];
    ["Offset of field: nvm_channel::ns_pgs"][::core::mem::offset_of!(nvm_channel, ns_pgs) - 8usize];
    ["Offset of field: nvm_channel::slba"][::core::mem::offset_of!(nvm_channel, slba) - 16usize];
    ["Offset of field: nvm_channel::elba"][::core::mem::offset_of!(nvm_channel, elba) - 24usize];
    ["Offset of field: nvm_channel::tot_bytes"]
        [::core::mem::offset_of!(nvm_channel, tot_bytes) - 32usize];
    ["Offset of field: nvm_channel::mmgr_rsv"]
        [::core::mem::offset_of!(nvm_channel, mmgr_rsv) - 40usize];
    ["Offset of field: nvm_channel::ftl_rsv"]
        [::core::mem::offset_of!(nvm_channel, ftl_rsv) - 42usize];
    ["Offset of field: nvm_channel::mmgr"][::core::mem::offset_of!(nvm_channel, mmgr) - 48usize];
    ["Offset of field: nvm_channel::ftl"][::core::mem::offset_of!(nvm_channel, ftl) - 56usize];
    ["Offset of field: nvm_channel::geometry"]
        [::core::mem::offset_of!(nvm_channel, geometry) - 64usize];
    ["Offset of field: nvm_channel::mmgr_rsv_list"]
        [::core::mem::offset_of!(nvm_channel, mmgr_rsv_list) - 72usize];
    ["Offset of field: nvm_channel::ftl_rsv_list"]
        [::core::mem::offset_of!(nvm_channel, ftl_rsv_list) - 200usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_parser_cmd {
    pub name: [::core::ffi::c_char; 31usize],
    pub opcode: u8,
    pub queue_type: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_parser_cmd"][::core::mem::size_of::<nvm_parser_cmd>() - 33usize];
    ["Alignment of nvm_parser_cmd"][::core::mem::align_of::<nvm_parser_cmd>() - 1usize];
    ["Offset of field: nvm_parser_cmd::name"]
        [::core::mem::offset_of!(nvm_parser_cmd, name) - 0usize];
    ["Offset of field: nvm_parser_cmd::opcode"]
        [::core::mem::offset_of!(nvm_parser_cmd, opcode) - 31usize];
    ["Offset of field: nvm_parser_cmd::queue_type"]
        [::core::mem::offset_of!(nvm_parser_cmd, queue_type) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_dma {
    pub ptr: *mut ::core::ffi::c_void,
    pub prp: u32,
    pub size: u64,
    pub direction: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nvm_dma"][::core::mem::size_of::<nvm_dma>() - 32usize];
    ["Alignment of nvm_dma"][::core::mem::align_of::<nvm_dma>() - 8usize];
    ["Offset of field: nvm_dma::ptr"][::core::mem::offset_of!(nvm_dma, ptr) - 0usize];
    ["Offset of field: nvm_dma::prp"][::core::mem::offset_of!(nvm_dma, prp) - 8usize];
    ["Offset of field: nvm_dma::size"][::core::mem::offset_of!(nvm_dma, size) - 16usize];
    ["Offset of field: nvm_dma::direction"][::core::mem::offset_of!(nvm_dma, direction) - 24usize];
};
unsafe extern "C" {
    pub fn ox_dma(dma: *mut nvm_dma) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltStatus {
    pub ready: u8,
    pub active: u8,
    pub allocated_memory: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltStatus"][::core::mem::size_of::<VoltStatus>() - 16usize];
    ["Alignment of VoltStatus"][::core::mem::align_of::<VoltStatus>() - 8usize];
    ["Offset of field: VoltStatus::ready"][::core::mem::offset_of!(VoltStatus, ready) - 0usize];
    ["Offset of field: VoltStatus::active"][::core::mem::offset_of!(VoltStatus, active) - 1usize];
    ["Offset of field: VoltStatus::allocated_memory"]
        [::core::mem::offset_of!(VoltStatus, allocated_memory) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltPage {
    pub state: u8,
    pub data: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltPage"][::core::mem::size_of::<VoltPage>() - 16usize];
    ["Alignment of VoltPage"][::core::mem::align_of::<VoltPage>() - 8usize];
    ["Offset of field: VoltPage::state"][::core::mem::offset_of!(VoltPage, state) - 0usize];
    ["Offset of field: VoltPage::data"][::core::mem::offset_of!(VoltPage, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltBlock {
    pub id: u16,
    pub life: u16,
    pub next_pg: *mut VoltPage,
    pub pages: *mut VoltPage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltBlock"][::core::mem::size_of::<VoltBlock>() - 24usize];
    ["Alignment of VoltBlock"][::core::mem::align_of::<VoltBlock>() - 8usize];
    ["Offset of field: VoltBlock::id"][::core::mem::offset_of!(VoltBlock, id) - 0usize];
    ["Offset of field: VoltBlock::life"][::core::mem::offset_of!(VoltBlock, life) - 2usize];
    ["Offset of field: VoltBlock::next_pg"][::core::mem::offset_of!(VoltBlock, next_pg) - 8usize];
    ["Offset of field: VoltBlock::pages"][::core::mem::offset_of!(VoltBlock, pages) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltLun {
    pub blk_offset: *mut VoltBlock,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltLun"][::core::mem::size_of::<VoltLun>() - 8usize];
    ["Alignment of VoltLun"][::core::mem::align_of::<VoltLun>() - 8usize];
    ["Offset of field: VoltLun::blk_offset"][::core::mem::offset_of!(VoltLun, blk_offset) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltCh {
    pub lun_offset: *mut VoltLun,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltCh"][::core::mem::size_of::<VoltCh>() - 8usize];
    ["Alignment of VoltCh"][::core::mem::align_of::<VoltCh>() - 8usize];
    ["Offset of field: VoltCh::lun_offset"][::core::mem::offset_of!(VoltCh, lun_offset) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VoltCtrl {
    pub status: VoltStatus,
    pub blocks: *mut VoltBlock,
    pub luns: *mut VoltLun,
    pub channels: *mut VoltCh,
    pub edma: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VoltCtrl"][::core::mem::size_of::<VoltCtrl>() - 48usize];
    ["Alignment of VoltCtrl"][::core::mem::align_of::<VoltCtrl>() - 8usize];
    ["Offset of field: VoltCtrl::status"][::core::mem::offset_of!(VoltCtrl, status) - 0usize];
    ["Offset of field: VoltCtrl::blocks"][::core::mem::offset_of!(VoltCtrl, blocks) - 16usize];
    ["Offset of field: VoltCtrl::luns"][::core::mem::offset_of!(VoltCtrl, luns) - 24usize];
    ["Offset of field: VoltCtrl::channels"][::core::mem::offset_of!(VoltCtrl, channels) - 32usize];
    ["Offset of field: VoltCtrl::edma"][::core::mem::offset_of!(VoltCtrl, edma) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct volt_dma {
    pub virt_addr: *mut u8,
    pub prp_index: u32,
    pub status: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of volt_dma"][::core::mem::size_of::<volt_dma>() - 16usize];
    ["Alignment of volt_dma"][::core::mem::align_of::<volt_dma>() - 8usize];
    ["Offset of field: volt_dma::virt_addr"][::core::mem::offset_of!(volt_dma, virt_addr) - 0usize];
    ["Offset of field: volt_dma::prp_index"][::core::mem::offset_of!(volt_dma, prp_index) - 8usize];
    ["Offset of field: volt_dma::status"][::core::mem::offset_of!(volt_dma, status) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct volt_info {
    pub channel_array: *mut nvm_channel,
    pub n_channels: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of volt_info"][::core::mem::size_of::<volt_info>() - 16usize];
    ["Alignment of volt_info"][::core::mem::align_of::<volt_info>() - 8usize];
    ["Offset of field: volt_info::channel_array"]
        [::core::mem::offset_of!(volt_info, channel_array) - 0usize];
    ["Offset of field: volt_info::n_channels"]
        [::core::mem::offset_of!(volt_info, n_channels) - 8usize];
};
unsafe extern "C" {
    pub fn volt_get_ch_info(ch_info: *mut volt_info) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn volt_get_geometry(g: *mut nvm_mmgr_geometry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn volt_get_last_address(ptr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
pub type __builtin_va_list = *mut ::core::ffi::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nvm_ftl {
    pub _address: u8,
}
