/* automatically generated by rust-bindgen 0.71.1 */

pub const MAGIC_EXTENSION : & :: core :: ffi :: CStr = c"ext" ; pub const MAGIC_STAGE : & :: core :: ffi :: CStr = c"stg" ; pub const MAGIC_CONNECTOR : & :: core :: ffi :: CStr = c"con" ; pub const TICKS_SEC : u32 = 10000000 ; pub const TICKS_MSEC : u32 = 10000 ; pub const TICKS_USEC : u32 = 10 ; pub type int_least64_t = i64 ; pub type uint_least64_t = u64 ; pub type int_fast64_t = i64 ; pub type uint_fast64_t = u64 ; pub type int_least32_t = i32 ; pub type uint_least32_t = u32 ; pub type int_fast32_t = i32 ; pub type uint_fast32_t = u32 ; pub type int_least16_t = i16 ; pub type uint_least16_t = u16 ; pub type int_fast16_t = i16 ; pub type uint_fast16_t = u16 ; pub type int_least8_t = i8 ; pub type uint_least8_t = u8 ; pub type int_fast8_t = i8 ; pub type uint_fast8_t = u8 ; pub type intmax_t = :: core :: ffi :: c_longlong ; pub type uintmax_t = :: core :: ffi :: c_ulonglong ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct lring_entry { pub function : * mut :: core :: ffi :: c_void , pub ctx : * mut :: core :: ffi :: c_void , } pub type ssd_os_extension_fn = :: core :: option :: Option < unsafe extern "C" fn (context : * mut :: core :: ffi :: c_void) -> :: core :: ffi :: c_int > ; pub type ssd_os_stage_fn = :: core :: option :: Option < unsafe extern "C" fn (context : * mut :: core :: ffi :: c_void) -> * mut :: core :: ffi :: c_void > ; pub type ssd_os_ctrl_fn = :: core :: option :: Option < unsafe extern "C" fn () -> :: core :: ffi :: c_int > ; pub type ssd_os_conn_ring_fn = :: core :: option :: Option < unsafe extern "C" fn (entry : * mut lring_entry) -> :: core :: ffi :: c_int > ; pub type ssd_os_conn_fn = :: core :: option :: Option < unsafe extern "C" fn (entry : * mut lring_entry) -> * mut pipeline > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct extension { pub magic : [:: core :: ffi :: c_char ; 4usize] , pub name : [:: core :: ffi :: c_char ; 32usize] , pub extension_fn : ssd_os_extension_fn , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct stage { pub magic : [:: core :: ffi :: c_char ; 4usize] , pub name : [:: core :: ffi :: c_char ; 32usize] , pub init_fn : ssd_os_ctrl_fn , pub exit_fn : ssd_os_ctrl_fn , pub stage_fn : ssd_os_stage_fn , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct pipeline { pub name : [:: core :: ffi :: c_char ; 32usize] , pub internal : [* mut :: core :: ffi :: c_void ; 2usize] , } # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct connector { pub magic : [:: core :: ffi :: c_char ; 4usize] , pub name : [:: core :: ffi :: c_char ; 32usize] , pub nosched : u32 , pub init_fn : ssd_os_ctrl_fn , pub exit_fn : ssd_os_ctrl_fn , pub conn_fn : ssd_os_conn_fn , pub ring_fn : ssd_os_conn_ring_fn , } pub type ssd_os_thread = :: core :: option :: Option < unsafe extern "C" fn (cpu : :: core :: ffi :: c_int , context : * mut :: core :: ffi :: c_void) > ; # [repr (C)] # [derive (Debug , Copy , Clone)] pub struct lring { _unused : [u8 ; 0] , } unsafe extern "C" { pub fn program_load (elf : * mut u8 , size : u32) -> :: core :: ffi :: c_int ; pub fn program_pipe (file : * mut u8) -> :: core :: ffi :: c_int ; pub fn program_connect (file : * mut u8) -> :: core :: ffi :: c_int ; pub fn loader_extensions_print () ; pub fn loader_stages_print () ; pub fn loader_connectors_print () ; pub fn timer_interrupt_on (interval : :: core :: ffi :: c_int , function : * mut :: core :: ffi :: c_void) ; pub fn timer_interrupt_off () ; pub fn thread_yield (cpu : :: core :: ffi :: c_int , thread : ssd_os_thread , context : * mut :: core :: ffi :: c_void) -> :: core :: ffi :: c_int ; pub fn ssd_os_print_s (s : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_c (c : :: core :: ffi :: c_char) ; pub fn ssd_os_print_i (x : :: core :: ffi :: c_ulong) ; pub fn ssd_os_print_h (x : :: core :: ffi :: c_ulong) ; pub fn ssd_os_print_ss (s1 : * const :: core :: ffi :: c_char , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_ss_l (s1 : * const :: core :: ffi :: c_char , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_sis (s1 : * const :: core :: ffi :: c_char , i : :: core :: ffi :: c_ulong , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_sis_l (s1 : * const :: core :: ffi :: c_char , i : :: core :: ffi :: c_ulong , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_shs (s1 : * const :: core :: ffi :: c_char , h : :: core :: ffi :: c_ulong , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_shs_l (s1 : * const :: core :: ffi :: c_char , h : :: core :: ffi :: c_ulong , s2 : * const :: core :: ffi :: c_char) ; pub fn ssd_os_print_lock () ; pub fn ssd_os_print_unlock () ; pub fn ssd_os_ncores () -> :: core :: ffi :: c_int ; pub fn ssd_os_this_cpu (name : * mut :: core :: ffi :: c_char) -> :: core :: ffi :: c_int ; pub fn ssd_os_mem_get (key : :: core :: ffi :: c_int) -> * mut :: core :: ffi :: c_void ; pub fn ssd_os_mem_size (key : :: core :: ffi :: c_int) -> :: core :: ffi :: c_int ; pub fn ssd_os_mem_nregions () -> :: core :: ffi :: c_int ; pub fn ssd_os_mem_cpy (dest : * mut :: core :: ffi :: c_void , src : * const :: core :: ffi :: c_void , n : u32) -> * mut :: core :: ffi :: c_void ; pub fn ssd_os_sleep (sec : :: core :: ffi :: c_int) ; pub fn ssd_os_msleep (msec : :: core :: ffi :: c_int) ; pub fn ssd_os_usleep (usec : :: core :: ffi :: c_int) ; pub fn ssd_os_timer_interrupt_on (interval : :: core :: ffi :: c_int , function : * mut :: core :: ffi :: c_void) ; pub fn ssd_os_timer_interrupt_off () ; pub fn ssd_os_lring_create (name : * mut :: core :: ffi :: c_char , size : :: core :: ffi :: c_int , mem : * mut :: core :: ffi :: c_void , flags : :: core :: ffi :: c_int) -> * mut lring ; pub fn ssd_os_lring_enqueue (ring : * mut lring , entry : * mut lring_entry) -> :: core :: ffi :: c_int ; pub fn ssd_os_lring_enqueue_m (ring : * mut lring , entry : * mut lring_entry) -> :: core :: ffi :: c_int ; pub fn ssd_os_lring_dequeue (ring : * mut lring , entry : * mut lring_entry) -> :: core :: ffi :: c_int ; pub fn ssd_os_lring_dequeue_m (ring : * mut lring , entry : * mut lring_entry) -> :: core :: ffi :: c_int ; pub fn ssd_os_lring_print (ring : * mut lring) ; pub fn ssd_os_get_connection (connector_name : * mut :: core :: ffi :: c_char , pipe_name : * mut :: core :: ffi :: c_char) -> * mut pipeline ; }