/* automatically generated by rust-bindgen 0.71.1 */

pub const RING_NAME_SIZE: u32 = 32;
pub const CACHE_LINE_SIZE: u32 = 64;
pub const RING_FLAG_SINGLE_CONS: u32 = 2;
pub const RING_FLAG_SINGLE_PROD: u32 = 4;
pub const RING_FLAG_RUNNING: u32 = 1;
pub const LOCKLESS_RING: u32 = 1;
#[repr(C)]
#[repr(align(64))]
#[derive(Debug, Copy, Clone)]
pub struct lring {
    pub name: [::core::ffi::c_char; 32usize],
    pub alloc_mem: ::core::ffi::c_int,
    pub ring_start: *mut ::core::ffi::c_void,
    pub last_entry: *mut ::core::ffi::c_void,
    pub ring_size: ::core::ffi::c_int,
    pub entry_size: ::core::ffi::c_int,
    pub flags: ::core::ffi::c_int,
    pub id: ::core::ffi::c_int,
    pub sem: ::core::ffi::c_int,
    pub prod: lring_prod,
    pub __bindgen_padding_0: [u32; 13usize],
    pub cons: lring_cons,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring_prod {
    pub sp_enqueue: ::core::ffi::c_int,
    pub head: *mut ::core::ffi::c_void,
    pub tail: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring_cons {
    pub sc_dequeue: ::core::ffi::c_int,
    pub head: *mut ::core::ffi::c_void,
    pub tail: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring_entry {
    pub function: *mut ::core::ffi::c_void,
    pub ctx: *mut ::core::ffi::c_void,
}
unsafe extern "C" {
    pub fn lring_flag_on(ring: *mut lring, flag: ::core::ffi::c_int);
    pub fn lring_flag_off(ring: *mut lring, flag: ::core::ffi::c_int);
    pub fn lring_flag_check(ring: *mut lring, flag: ::core::ffi::c_int) -> ::core::ffi::c_int;
    pub fn lring_create(
        name: *mut ::core::ffi::c_char,
        size: ::core::ffi::c_int,
        mem: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_int,
    ) -> *mut lring;
    pub fn lring_print(ring: *mut lring);
}
