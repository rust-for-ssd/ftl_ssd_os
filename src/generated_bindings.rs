/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC23: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_TIME_BITS64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C23_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 40;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAGIC_EXTENSION: &[u8; 4] = b"ext\0";
pub const MAGIC_STAGE: &[u8; 4] = b"stg\0";
pub const MAGIC_CONNECTOR: &[u8; 4] = b"con\0";
pub const TICKS_SEC: u32 = 10000000;
pub const TICKS_MSEC: u32 = 10000;
pub const TICKS_USEC: u32 = 10;
pub type __u_char = ::core::ffi::c_uchar;
pub type __u_short = ::core::ffi::c_ushort;
pub type __u_int = ::core::ffi::c_uint;
pub type __u_long = ::core::ffi::c_ulong;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::core::ffi::c_long;
pub type __u_quad_t = ::core::ffi::c_ulong;
pub type __intmax_t = ::core::ffi::c_long;
pub type __uintmax_t = ::core::ffi::c_ulong;
pub type __dev_t = ::core::ffi::c_ulong;
pub type __uid_t = ::core::ffi::c_uint;
pub type __gid_t = ::core::ffi::c_uint;
pub type __ino_t = ::core::ffi::c_ulong;
pub type __ino64_t = ::core::ffi::c_ulong;
pub type __mode_t = ::core::ffi::c_uint;
pub type __nlink_t = ::core::ffi::c_ulong;
pub type __off_t = ::core::ffi::c_long;
pub type __off64_t = ::core::ffi::c_long;
pub type __pid_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::core::ffi::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::core::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::core::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::core::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::core::ffi::c_long;
pub type __rlim_t = ::core::ffi::c_ulong;
pub type __rlim64_t = ::core::ffi::c_ulong;
pub type __id_t = ::core::ffi::c_uint;
pub type __time_t = ::core::ffi::c_long;
pub type __useconds_t = ::core::ffi::c_uint;
pub type __suseconds_t = ::core::ffi::c_long;
pub type __suseconds64_t = ::core::ffi::c_long;
pub type __daddr_t = ::core::ffi::c_int;
pub type __key_t = ::core::ffi::c_int;
pub type __clockid_t = ::core::ffi::c_int;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type __blksize_t = ::core::ffi::c_long;
pub type __blkcnt_t = ::core::ffi::c_long;
pub type __blkcnt64_t = ::core::ffi::c_long;
pub type __fsblkcnt_t = ::core::ffi::c_ulong;
pub type __fsblkcnt64_t = ::core::ffi::c_ulong;
pub type __fsfilcnt_t = ::core::ffi::c_ulong;
pub type __fsfilcnt64_t = ::core::ffi::c_ulong;
pub type __fsword_t = ::core::ffi::c_long;
pub type __ssize_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type __syscall_ulong_t = ::core::ffi::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::core::ffi::c_char;
pub type __intptr_t = ::core::ffi::c_long;
pub type __socklen_t = ::core::ffi::c_uint;
pub type __sig_atomic_t = ::core::ffi::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::core::ffi::c_schar;
pub type int_fast16_t = ::core::ffi::c_long;
pub type int_fast32_t = ::core::ffi::c_long;
pub type int_fast64_t = ::core::ffi::c_long;
pub type uint_fast8_t = ::core::ffi::c_uchar;
pub type uint_fast16_t = ::core::ffi::c_ulong;
pub type uint_fast32_t = ::core::ffi::c_ulong;
pub type uint_fast64_t = ::core::ffi::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring_entry {
    pub function: *mut ::core::ffi::c_void,
    pub ctx: *mut ::core::ffi::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lring_entry"][::core::mem::size_of::<lring_entry>() - 16usize];
    ["Alignment of lring_entry"][::core::mem::align_of::<lring_entry>() - 8usize];
    ["Offset of field: lring_entry::function"]
        [::core::mem::offset_of!(lring_entry, function) - 0usize];
    ["Offset of field: lring_entry::ctx"][::core::mem::offset_of!(lring_entry, ctx) - 8usize];
};
pub type ssd_os_extension_fn = ::core::option::Option<
    unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> ::core::ffi::c_int,
>;
pub type ssd_os_stage_fn = ::core::option::Option<
    unsafe extern "C" fn(context: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
>;
pub type ssd_os_ctrl_fn = ::core::option::Option<unsafe extern "C" fn() -> ::core::ffi::c_int>;
pub type ssd_os_conn_ring_fn =
    ::core::option::Option<unsafe extern "C" fn(entry: *mut lring_entry) -> ::core::ffi::c_int>;
pub type ssd_os_conn_fn =
    ::core::option::Option<unsafe extern "C" fn(entry: *mut lring_entry) -> *mut pipeline>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extension {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub extension_fn: ssd_os_extension_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of extension"][::core::mem::size_of::<extension>() - 48usize];
    ["Alignment of extension"][::core::mem::align_of::<extension>() - 8usize];
    ["Offset of field: extension::magic"][::core::mem::offset_of!(extension, magic) - 0usize];
    ["Offset of field: extension::name"][::core::mem::offset_of!(extension, name) - 4usize];
    ["Offset of field: extension::extension_fn"]
        [::core::mem::offset_of!(extension, extension_fn) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stage {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub init_fn: ssd_os_ctrl_fn,
    pub exit_fn: ssd_os_ctrl_fn,
    pub stage_fn: ssd_os_stage_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of stage"][::core::mem::size_of::<stage>() - 64usize];
    ["Alignment of stage"][::core::mem::align_of::<stage>() - 8usize];
    ["Offset of field: stage::magic"][::core::mem::offset_of!(stage, magic) - 0usize];
    ["Offset of field: stage::name"][::core::mem::offset_of!(stage, name) - 4usize];
    ["Offset of field: stage::init_fn"][::core::mem::offset_of!(stage, init_fn) - 40usize];
    ["Offset of field: stage::exit_fn"][::core::mem::offset_of!(stage, exit_fn) - 48usize];
    ["Offset of field: stage::stage_fn"][::core::mem::offset_of!(stage, stage_fn) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pipeline {
    pub name: [::core::ffi::c_char; 32usize],
    pub internal: [*mut ::core::ffi::c_void; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pipeline"][::core::mem::size_of::<pipeline>() - 48usize];
    ["Alignment of pipeline"][::core::mem::align_of::<pipeline>() - 8usize];
    ["Offset of field: pipeline::name"][::core::mem::offset_of!(pipeline, name) - 0usize];
    ["Offset of field: pipeline::internal"][::core::mem::offset_of!(pipeline, internal) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct connector {
    pub magic: [::core::ffi::c_char; 4usize],
    pub name: [::core::ffi::c_char; 32usize],
    pub init_fn: ssd_os_ctrl_fn,
    pub exit_fn: ssd_os_ctrl_fn,
    pub conn_fn: ssd_os_conn_fn,
    pub ring_fn: ssd_os_conn_ring_fn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of connector"][::core::mem::size_of::<connector>() - 72usize];
    ["Alignment of connector"][::core::mem::align_of::<connector>() - 8usize];
    ["Offset of field: connector::magic"][::core::mem::offset_of!(connector, magic) - 0usize];
    ["Offset of field: connector::name"][::core::mem::offset_of!(connector, name) - 4usize];
    ["Offset of field: connector::init_fn"][::core::mem::offset_of!(connector, init_fn) - 40usize];
    ["Offset of field: connector::exit_fn"][::core::mem::offset_of!(connector, exit_fn) - 48usize];
    ["Offset of field: connector::conn_fn"][::core::mem::offset_of!(connector, conn_fn) - 56usize];
    ["Offset of field: connector::ring_fn"][::core::mem::offset_of!(connector, ring_fn) - 64usize];
};
unsafe extern "C" {
    pub fn program_load(elf: *mut u8, size: u32) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn program_pipe(file: *mut u8) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn program_connect(file: *mut u8) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn loader_extensions_print();
}
unsafe extern "C" {
    pub fn loader_stages_print();
}
unsafe extern "C" {
    pub fn loader_connectors_print();
}
unsafe extern "C" {
    pub fn ssd_os_print_s(s: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_c(c: ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_i(x: ::core::ffi::c_ulong);
}
unsafe extern "C" {
    pub fn ssd_os_print_h(x: ::core::ffi::c_ulong);
}
unsafe extern "C" {
    pub fn ssd_os_print_ss(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_ss_l(s1: *const ::core::ffi::c_char, s2: *const ::core::ffi::c_char);
}
unsafe extern "C" {
    pub fn ssd_os_print_sis(
        s1: *const ::core::ffi::c_char,
        i: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_sis_l(
        s1: *const ::core::ffi::c_char,
        i: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_shs(
        s1: *const ::core::ffi::c_char,
        h: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_shs_l(
        s1: *const ::core::ffi::c_char,
        h: ::core::ffi::c_ulong,
        s2: *const ::core::ffi::c_char,
    );
}
unsafe extern "C" {
    pub fn ssd_os_print_lock();
}
unsafe extern "C" {
    pub fn ssd_os_print_unlock();
}
unsafe extern "C" {
    pub fn ssd_os_ncores() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_this_cpu(name: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_get(key: ::core::ffi::c_int) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ssd_os_mem_size(key: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_nregions() -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_mem_cpy(
        dest: *mut ::core::ffi::c_void,
        src: *const ::core::ffi::c_void,
        n: u32,
    ) -> *mut ::core::ffi::c_void;
}
unsafe extern "C" {
    pub fn ssd_os_sleep(sec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_msleep(msec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_usleep(usec: ::core::ffi::c_int);
}
unsafe extern "C" {
    pub fn ssd_os_timer_interrupt_on(
        interval: ::core::ffi::c_int,
        function: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn ssd_os_timer_interrupt_off();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lring {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn ssd_os_lring_create(
        name: *mut ::core::ffi::c_char,
        size: ::core::ffi::c_int,
        mem: *mut ::core::ffi::c_void,
        flags: ::core::ffi::c_int,
    ) -> *mut lring;
}
unsafe extern "C" {
    pub fn ssd_os_lring_enqueue(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_enqueue_m(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_dequeue(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_dequeue_m(ring: *mut lring, entry: *mut lring_entry) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn ssd_os_lring_print(ring: *mut lring);
}
unsafe extern "C" {
    pub fn ssd_os_get_connection(
        connector_name: *mut ::core::ffi::c_char,
        pipe_name: *mut ::core::ffi::c_char,
    ) -> *mut pipeline;
}
